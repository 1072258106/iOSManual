<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Dname</key>
		<string>JSONKit</string>
		<key>Durl</key>
		<string>https://github.com/johnezang/JSONKit</string>
		<key>Dtext</key>
		<string>JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>JSONModel</string>
		<key>Durl</key>
		<string>https://github.com/icanzilb/JSONModel</string>
		<key>Dtext</key>
		<string> 解析服务器返回的Json数据的库</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>JSONModel源码解析</string>
		<key>Durl</key>
		<string>http://www.jianshu.com/p/3d795ea37835</string>
		<key>Dtext</key>
		<string></string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>Mantle</string>
		<key>Durl</key>
		<string>https://github.com/Mantle/Mantle</string>
		<key>Dtext</key>
		<string>Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>为什么选择Mantle</string>
		<key>Durl</key>
		<string>http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/</string>
		<key>Dtext</key>
		<string></string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>RFJModel</string>
		<key>Durl</key>
		<string>https://github.com/refusebt/RFJModel</string>
		<key>Dtext</key>
		<string>RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>XMLDictionary</string>
		<key>Durl</key>
		<string>https://github.com/nicklockwood/XMLDictionary</string>
		<key>Dtext</key>
		<string>iOS 与  Mac OS 平台下 XML 与 NSDictionary 相互转化开源类库。</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>MJExtension</string>
		<key>Durl</key>
		<string>https://github.com/CoderMJLee/MJExtension</string>
		<key>Dtext</key>
		<string>用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>CFRuntime</string>
		<key>Durl</key>
		<string>https://github.com/CoderMJLee/MJExtension</string>
		<key>Dtext</key>
		<string>Swift 版的 MJExtension，运行时、反射与一键字典模型互转。</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>DDModel</string>
		<key>Durl</key>
		<string>https://github.com/openboy2012/DDModel</string>
		<key>Dtext</key>
		<string>快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>protobuf-swift</string>
		<key>Durl</key>
		<string>https://github.com/alexeyxo/protobuf-swift</string>
		<key>Dtext</key>
		<string>Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>JSONCodable</string>
		<key>Durl</key>
		<string>https://github.com/matthewcheok/JSONCodable</string>
		<key>Dtext</key>
		<string>基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。
</string>
	</dict>
	<dict>
		<key>Dname</key>
		<string>SwiftyJSON</string>
		<key>Durl</key>
		<string>https://github.com/SwiftyJSON/SwiftyJSON</string>
		<key>Dtext</key>
		<string>使Swift的JSON解析变得简单。
</string>
	</dict>
</array>
</plist>
